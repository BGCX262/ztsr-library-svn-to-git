package library.client;

import java.util.Collection;
import java.util.HashMap;
import library.common.*;
import javax.swing.table.*;
import javax.swing.JOptionPane;
import java.rmi.RemoteException;
import java.util.Map;
import javax.swing.ListSelectionModel;

/**
 * @author  Karolina
 */
public class ResultPanel extends javax.swing.JPanel {

    private FindPanel findPanel;
    private DetailsPanel detailsPanel;
    private SessionData sData;
    private Map<Integer, Book> booksDetails;
            
    /** Creates new form ResultPanel */
    public ResultPanel(SessionData s) {
        initComponents();
        this.setVisible(false);
        sData = s;
        booksDetails = new HashMap<Integer, Book>();
        resultsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        amountLabel = new javax.swing.JLabel();
        returnButton = new javax.swing.JButton();
        insidePanel = new javax.swing.JPanel();
        detailsButton = new javax.swing.JButton();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();

        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        titleLabel.setText("Ilo\u015b\u0107 rezultat\u00f3w:");

        amountLabel.setFont(new java.awt.Font("Tahoma", 1, 12));

        returnButton.setFont(new java.awt.Font("Tahoma", 1, 12));
        returnButton.setText("Powr\u00f3t");
        returnButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                returnButtonKeyPressed(evt);
            }
        });
        returnButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                returnButtonMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout titlePanelLayout = new org.jdesktop.layout.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(titleLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(amountLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 269, Short.MAX_VALUE)
                .add(returnButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 151, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(27, 27, 27))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(titlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(returnButton)
                    .add(titleLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(amountLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        insidePanel.setAutoscrolls(true);
        detailsButton.setFont(new java.awt.Font("Tahoma", 1, 12));
        detailsButton.setText("Egzemplarze");
        detailsButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                detailsButtonKeyPressed(evt);
            }
        });
        detailsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                detailsButtonMouseClicked(evt);
            }
        });

        resultsScrollPane.setFont(new java.awt.Font("Tahoma", 1, 12));
        resultsTable.setFont(new java.awt.Font("Arial", 0, 12));
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Autor", "Tytu³", "Wydawnictwo", "Rok wydania", "Dostêpne egzemplarze"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setRowMargin(2);
        resultsTable.setSelectionBackground(new java.awt.Color(0, 204, 204));
        resultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsTableMouseClicked(evt);
            }
        });

        resultsScrollPane.setViewportView(resultsTable);

        org.jdesktop.layout.GroupLayout insidePanelLayout = new org.jdesktop.layout.GroupLayout(insidePanel);
        insidePanel.setLayout(insidePanelLayout);
        insidePanelLayout.setHorizontalGroup(
            insidePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(insidePanelLayout.createSequentialGroup()
                .add(466, 466, 466)
                .add(detailsButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(55, 55, 55))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, resultsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 673, Short.MAX_VALUE)
        );
        insidePanelLayout.setVerticalGroup(
            insidePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(insidePanelLayout.createSequentialGroup()
                .add(detailsButton)
                .add(28, 28, 28)
                .add(resultsScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 359, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(titlePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(insidePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(titlePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(insidePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTableMouseClicked
        if (evt.getClickCount() == 2)
            detailsButtonAccept();
    }//GEN-LAST:event_resultsTableMouseClicked

    private void detailsButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_detailsButtonKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER){
            this.detailsButtonAccept();
        }
    }//GEN-LAST:event_detailsButtonKeyPressed

    private void returnButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_returnButtonKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER){
            this.returnButtonAccept();
        }
    }//GEN-LAST:event_returnButtonKeyPressed

    private void detailsButtonAccept(){
        int rowSelected = this.resultsTable.getSelectedRow();
        if (rowSelected == -1){
            JOptionPane.showMessageDialog(this, "Wybierz pozycjê, dla której chcesz obejrzeæ egzemplarze!","Uwaga",JOptionPane.WARNING_MESSAGE);
        }else{
            try{
                Collection<ReservationDetails> books = sData.getLibrary().getBookCopies(
                booksDetails.get(Integer.valueOf(rowSelected)).bookId);
                this.setVisible(false);
                detailsPanel.displayResults(books,  booksDetails.get(Integer.valueOf(rowSelected)), rowSelected);
            }catch (RemoteException e){
                JOptionPane.showMessageDialog(this, e.detail.getLocalizedMessage(),"Uwaga",JOptionPane.WARNING_MESSAGE);
            }
        }
    }
    
    private void detailsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_detailsButtonMouseClicked
         this.detailsButtonAccept();                                      
    }//GEN-LAST:event_detailsButtonMouseClicked

    private void returnButtonAccept(){
        this.setVisible(false);
        this.clearFields();
        findPanel.setVisible(true);    
    }
    
    private void returnButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_returnButtonMouseClicked
        this.returnButtonAccept();
    }//GEN-LAST:event_returnButtonMouseClicked
    
    private void clearFields(){
        this.insidePanel.setVisible(true);
        int i = this.resultsTable.getModel().getRowCount();
       
        for(int j = 0 ; j < i ; j++){
            ((DefaultTableModel)this.resultsTable.getModel()).removeRow(0);
        }  
        booksDetails.clear();
    }
    
    public void setParentPanel(FindPanel f) { findPanel = f; }
    
    public void setDetailsPanel(DetailsPanel d) { detailsPanel = d; }
    
    public void displayResults(Collection<Book> books){
        this.amountLabel.setText(Integer.toString(books.size()));
        if (books.size() <= 0) {
            this.insidePanel.setVisible(false);
        }else{
            int i = 0;
            for (Book b : books) {
                Object[] obj = new Object[5];
                obj[0] = b.getAuthor();
                obj[1] = b.getTitle();
                obj[2] = b.getPublisher();
                obj[3] = b.getPublishYear();
                obj[4] = b.hasAvailableCopies;
                booksDetails.put(Integer.valueOf(i), b);
                i++;
                ((DefaultTableModel)this.resultsTable.getModel()).addRow(obj);
            }
        }
        this.setVisible(true);
    }
    
    /** Method used to update data in Result Panel 
     * after returning from Details Panel (after reservations made).
     */
    public void displayParent(int row, boolean available){
        ((DefaultTableModel)this.resultsTable.getModel()).setValueAt(available,row, 4);
        this.setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel amountLabel;
    private javax.swing.JButton detailsButton;
    private javax.swing.JPanel insidePanel;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JTable resultsTable;
    private javax.swing.JButton returnButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables
    
}
